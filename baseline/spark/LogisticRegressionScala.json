{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1537922816132_-2045911029","id":"20180926-004656_476804202","dateCreated":"2018-09-26T00:46:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:193","text":"import org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.sql.types.{IntegerType, DoubleType}\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\n\nimport org.apache.spark.SparkFiles\n\nspark.sparkContext.addFile(\"https://s3-us-west-2.amazonaws.com/mlapi-samples/demo/data/input/iris.csv\")\nval data = spark.read.format(\"csv\").option(\"header\", \"true\").load(SparkFiles.get(\"iris.csv\"))\n\n//data.show()\n//data.printSchema()\n\n// Transform, convert string coloumn to number\nval featureDf = data.select(data(\"sepal_length\").cast(DoubleType).as(\"sepal_length\"),\n                            data(\"sepal_width\").cast(DoubleType).as(\"sepal_width\"),\n                            data(\"petal_width\").cast(DoubleType).as(\"petal_width\"),\n                            data(\"petal_length\").cast(DoubleType).as(\"petal_length\"),\n                            data(\"species\") )\n\n// assember the features\nval assembler = new VectorAssembler()\n  .setInputCols(Array(\"sepal_length\", \"sepal_width\", \"petal_width\", \"petal_length\"))\n  .setOutputCol(\"features\")\n  \nval output = assembler.transform(featureDf)\n\n// create lable and features\nval labelIndexer = new StringIndexer()\n  .setInputCol(\"species\")\n  .setOutputCol(\"indexedLabel\")\n  .fit(output)\n\nval featureIndexer = new VectorIndexer()\n  .setInputCol(\"features\")\n  .setOutputCol(\"indexedFeatures\")\n  .setMaxCategories(4)\n  .fit(output)\n  \n// Split the data into training and test sets (30% held out for testing).\nval Array(trainingData, testData) = output.randomSplit(Array(0.7, 0.3))\n\n// Train a RandomForest model.\nval rf = new RandomForestClassifier()\n  .setLabelCol(\"indexedLabel\")\n  .setFeaturesCol(\"indexedFeatures\")\n  .setNumTrees(10)\n\n// Convert indexed labels back to original labels.\nval labelConverter = new IndexToString()\n  .setInputCol(\"prediction\")\n  .setOutputCol(\"predictedLabel\")\n  .setLabels(labelIndexer.labels)\n\n// Chain indexers and forest in a Pipeline.\nval pipeline = new Pipeline()\n  .setStages(Array(labelIndexer, featureIndexer, rf, labelConverter))\n\n// Train model. This also runs the indexers.\nval model = pipeline.fit(trainingData)\n\n\n// Make predictions.\nval predictions = model.transform(testData)\n\n\n// Select example rows to display.\npredictions.select(\"predictedLabel\", \"species\", \"features\").show(5)\n\n// Select (prediction, true label) and compute test error.\nval evaluator = new MulticlassClassificationEvaluator()\n  .setLabelCol(\"indexedLabel\")\n  .setPredictionCol(\"prediction\")\n  .setMetricName(\"accuracy\")\nval accuracy = evaluator.evaluate(predictions)\nprintln(\"Test Error = \" + (1.0 - accuracy))\n\nval rfModel = model.stages(2).asInstanceOf[RandomForestClassificationModel]\nprintln(\"Learned classification forest model:\\n\" + rfModel.toDebugString)\n\n","dateUpdated":"2018-09-26T01:22:19+0000","dateFinished":"2018-09-26T01:22:23+0000","dateStarted":"2018-09-26T01:22:19+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.sql.types.{IntegerType, DoubleType}\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\nimport org.apache.spark.SparkFiles\ndata: org.apache.spark.sql.DataFrame = [sepal_length: string, sepal_width: string ... 3 more fields]\nfeatureDf: org.apache.spark.sql.DataFrame = [sepal_length: double, sepal_width: double ... 3 more fields]\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_b4ee28bd79ab\noutput: org.apache.spark.sql.DataFrame = [sepal_length: double, sepal_width: double ... 4 more fields]\nlabelIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_d2bd106e2776\nfeatureIndexer: org.apache.spark.ml.feature.VectorIndexerModel = vecIdx_3c1772cee078\ntrainingData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [sepal_length: double, sepal_width: double ... 4 more fields]\ntestData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [sepal_length: double, sepal_width: double ... 4 more fields]\nrf: org.apache.spark.ml.classification.RandomForestClassifier = rfc_9d87c0407416\nlabelConverter: org.apache.spark.ml.feature.IndexToString = idxToStr_09235ebf9cbd\npipeline: org.apache.spark.ml.Pipeline = pipeline_b1f9758a409a\nmodel: org.apache.spark.ml.PipelineModel = pipeline_b1f9758a409a\npredictions: org.apache.spark.sql.DataFrame = [sepal_length: double, sepal_width: double ... 10 more fields]\n+--------------+-----------+-----------------+\n|predictedLabel|    species|         features|\n+--------------+-----------+-----------------+\n|   Iris Setosa|Iris Setosa|[4.3,3.0,0.1,1.1]|\n|   Iris Setosa|Iris Setosa|[4.4,3.0,0.2,1.3]|\n|   Iris Setosa|Iris Setosa|[4.6,3.2,0.2,1.4]|\n|   Iris Setosa|Iris Setosa|[4.6,3.4,0.3,1.4]|\n|   Iris Setosa|Iris Setosa|[4.7,3.2,0.2,1.3]|\n+--------------+-----------+-----------------+\nonly showing top 5 rows\n\nevaluator: org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator = mcEval_31afb23a826b\naccuracy: Double = 0.9464285714285714\nTest Error = 0.0535714285714286\nrfModel: org.apache.spark.ml.classification.RandomForestClassificationModel = RandomForestClassificationModel (uid=rfc_d9b5be6d8a7f) with 10 trees\nLearned classification forest model:\nRandomForestClassificationModel (uid=rfc_d9b5be6d8a7f) with 10 trees\n  Tree 0 (weight 1.0):\n    If (feature 3 <= 1.7)\n     Predict: 1.0\n    Else (feature 3 > 1.7)\n     If (feature 3 <= 4.7)\n      If (feature 1 <= 2.5)\n       If (feature 0 <= 4.9)\n        Predict: 0.0\n       Else (feature 0 > 4.9)\n        Predict: 2.0\n      Else (feature 1 > 2.5)\n       Predict: 2.0\n     Else (feature 3 > 4.7)\n      If (feature 2 <= 1.5)\n       Predict: 2.0\n      Else (feature 2 > 1.5)\n       Predict: 0.0\n  Tree 1 (weight 1.0):\n    If (feature 2 <= 1.6)\n     If (feature 3 <= 1.9)\n      Predict: 1.0\n     Else (feature 3 > 1.9)\n      If (feature 3 <= 4.8)\n       Predict: 2.0\n      Else (feature 3 > 4.8)\n       Predict: 0.0\n    Else (feature 2 > 1.6)\n     Predict: 0.0\n  Tree 2 (weight 1.0):\n    If (feature 3 <= 1.9)\n     Predict: 1.0\n    Else (feature 3 > 1.9)\n     If (feature 2 <= 1.6)\n      If (feature 3 <= 4.9)\n       Predict: 2.0\n      Else (feature 3 > 4.9)\n       Predict: 0.0\n     Else (feature 2 > 1.6)\n      Predict: 0.0\n  Tree 3 (weight 1.0):\n    If (feature 3 <= 4.8)\n     If (feature 3 <= 1.9)\n      Predict: 1.0\n     Else (feature 3 > 1.9)\n      Predict: 2.0\n    Else (feature 3 > 4.8)\n     Predict: 0.0\n  Tree 4 (weight 1.0):\n    If (feature 2 <= 0.5)\n     Predict: 1.0\n    Else (feature 2 > 0.5)\n     If (feature 2 <= 1.5)\n      If (feature 2 <= 1.4)\n       Predict: 2.0\n      Else (feature 2 > 1.4)\n       If (feature 3 <= 4.9)\n        Predict: 2.0\n       Else (feature 3 > 4.9)\n        Predict: 0.0\n     Else (feature 2 > 1.5)\n      Predict: 0.0\n  Tree 5 (weight 1.0):\n    If (feature 2 <= 0.5)\n     Predict: 1.0\n    Else (feature 2 > 0.5)\n     If (feature 2 <= 1.6)\n      Predict: 2.0\n     Else (feature 2 > 1.6)\n      Predict: 0.0\n  Tree 6 (weight 1.0):\n    If (feature 3 <= 4.9)\n     If (feature 3 <= 1.9)\n      Predict: 1.0\n     Else (feature 3 > 1.9)\n      If (feature 3 <= 4.7)\n       Predict: 2.0\n      Else (feature 3 > 4.7)\n       If (feature 0 <= 6.2)\n        Predict: 0.0\n       Else (feature 0 > 6.2)\n        Predict: 2.0\n    Else (feature 3 > 4.9)\n     Predict: 0.0\n  Tree 7 (weight 1.0):\n    If (feature 0 <= 5.8)\n     If (feature 2 <= 0.5)\n      Predict: 1.0\n     Else (feature 2 > 0.5)\n      If (feature 2 <= 1.5)\n       Predict: 2.0\n      Else (feature 2 > 1.5)\n       Predict: 0.0\n    Else (feature 0 > 5.8)\n     If (feature 2 <= 1.6)\n      If (feature 3 <= 4.9)\n       Predict: 2.0\n      Else (feature 3 > 4.9)\n       Predict: 0.0\n     Else (feature 2 > 1.6)\n      Predict: 0.0\n  Tree 8 (weight 1.0):\n    If (feature 3 <= 1.9)\n     Predict: 1.0\n    Else (feature 3 > 1.9)\n     If (feature 3 <= 4.7)\n      If (feature 2 <= 1.5)\n       Predict: 2.0\n      Else (feature 2 > 1.5)\n       Predict: 0.0\n     Else (feature 3 > 4.7)\n      Predict: 0.0\n  Tree 9 (weight 1.0):\n    If (feature 2 <= 0.5)\n     Predict: 1.0\n    Else (feature 2 > 0.5)\n     If (feature 0 <= 6.8)\n      If (feature 0 <= 5.7)\n       Predict: 2.0\n      Else (feature 0 > 5.7)\n       If (feature 2 <= 1.6)\n        If (feature 3 <= 4.8)\n         Predict: 2.0\n        Else (feature 3 > 4.8)\n         Predict: 0.0\n       Else (feature 2 > 1.6)\n        Predict: 0.0\n     Else (feature 0 > 6.8)\n      Predict: 0.0\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1537922831279_-1626737232","id":"20180926-004711_1938133322","dateCreated":"2018-09-26T00:47:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:352","text":"// spark version\nsc.version","dateUpdated":"2018-09-26T00:50:51+0000","dateFinished":"2018-09-26T00:49:11+0000","dateStarted":"2018-09-26T00:49:10+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: String = 2.1.0\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1537922950865_-545592822","id":"20180926-004910_835794278","dateCreated":"2018-09-26T00:49:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:451","text":"// scala version\nutil.Properties.versionString","dateUpdated":"2018-09-26T00:51:09+0000","dateFinished":"2018-09-26T00:50:33+0000","dateStarted":"2018-09-26T00:50:33+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: String = version 2.11.8\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1537923033390_1506797373","id":"20180926-005033_1151525145","dateCreated":"2018-09-26T00:50:33+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:547"}],"name":"LogisticRegressionScala","id":"2DQJFZWX8","angularObjects":{"2DQQDK1K2:shared_process":[],"2DR6A2KF3:shared_process":[],"2DRR93F8F:shared_process":[],"2DRKD54GV:shared_process":[],"2DR3KFXUG:shared_process":[],"2DT5KD7FP:shared_process":[],"2DTSJA5AP:shared_process":[],"2DTQN7TGH:shared_process":[],"2DTQW8HGU:shared_process":[],"2DQGCU5QC:shared_process":[],"2DTXP85DG:shared_process":[],"2DTF2U1ZD:shared_process":[],"2DQVG6EB6:shared_process":[],"2DQK3P9Q5:shared_process":[],"2DQW7U5XX:shared_process":[],"2DRUVTZBG:shared_process":[],"2DRMSSQW6:shared_process":[],"2DU5XME4T:shared_process":[],"2DT2U2RGG:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}