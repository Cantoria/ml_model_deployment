{"paragraphs":[{"text":"%pyspark\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.classification import RandomForestClassifier\nfrom pyspark.ml.feature import IndexToString, StringIndexer, VectorIndexer\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.ml.linalg import Vectors\nfrom pyspark.ml.feature import VectorAssembler\n\nfrom pyspark.sql.types import DoubleType\n\nfrom pyspark import SparkFiles\nfrom pyspark import SparkContext\n\nurl = \"https://s3-us-west-2.amazonaws.com/mlapi-samples/demo/data/input/iris.csv\"\n\nspark.sparkContext.addFile(url)\n\n# Load and parse the data file, converting it to a DataFrame.\ndata = spark.read.csv(SparkFiles.get(\"iris.csv\"), header=True)\n\ndata = data.withColumn(\"sepal_length\", data[\"sepal_length\"].cast(DoubleType()))\ndata = data.withColumn(\"sepal_width\", data[\"sepal_width\"].cast(DoubleType()))\ndata = data.withColumn(\"petal_width\", data[\"petal_width\"].cast(DoubleType()))\ndata = data.withColumn(\"petal_length\", data[\"petal_length\"].cast(DoubleType()))\n\n#data.show()\ndata.printSchema()\n\nassembler = VectorAssembler(\n    inputCols=[\"sepal_length\", \"sepal_width\", \"petal_width\", \"petal_length\"],\n    outputCol=\"features\")\n\noutput = assembler.transform(data)\n\n# Index labels, adding metadata to the label column.\n# Fit on whole dataset to include all labels in index.\nlabelIndexer = StringIndexer(inputCol=\"species\", outputCol=\"indexedLabel\").fit(output)\n\n# Automatically identify categorical features, and index them.\n# Set maxCategories so features with > 4 distinct values are treated as continuous.\nfeatureIndexer =\\\n    VectorIndexer(inputCol=\"features\", outputCol=\"indexedFeatures\", maxCategories=4).fit(output)\n\n# Split the data into training and test sets (30% held out for testing)\n(trainingData, testData) = data.randomSplit([0.7, 0.3])\n\n# Train a RandomForest model.\nrf = RandomForestClassifier(labelCol=\"indexedLabel\", featuresCol=\"indexedFeatures\", numTrees=10)\n\n# Convert indexed labels back to original labels.\nlabelConverter = IndexToString(inputCol=\"prediction\", outputCol=\"predictedLabel\",\n                               labels=labelIndexer.labels)\n\n# Chain indexers and forest in a Pipeline\npipeline = Pipeline(stages=[assembler, labelIndexer, featureIndexer, rf, labelConverter])\n\n# Train model.  This also runs the indexers.\nmodel = pipeline.fit(trainingData)\n\n# Make predictions.\npredictions = model.transform(testData)\n\n# Select example rows to display.\npredictions.select(\"predictedLabel\", \"species\", \"features\").show(5)\n\n# Select (prediction, true label) and compute test error\nevaluator = MulticlassClassificationEvaluator(\n    labelCol=\"indexedLabel\", predictionCol=\"prediction\", metricName=\"accuracy\")\naccuracy = evaluator.evaluate(predictions)\nprint(\"Test Error = %g\" % (1.0 - accuracy))\n\nrfModel = model.stages[3]\nprint(rfModel)  # summary only\n\n#filebase = \"s3://mlapi-samples/pyspark-model\"\nfilebase=\"hdfs://ad95fe885c37011e8aee806444a30499-1181034928.us-west-2.elb.amazonaws.com:9000/tmp\"\n\npipeline.write().overwrite().save(\"{}/classification-pipeline\".format(filebase))\nmodel.write().overwrite().save(\"{}/classification-model\".format(filebase))\n","user":"anonymous","dateUpdated":"2018-10-02T19:00:40+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- sepal_length: double (nullable = true)\n |-- sepal_width: double (nullable = true)\n |-- petal_length: double (nullable = true)\n |-- petal_width: double (nullable = true)\n |-- species: string (nullable = true)\n\n+--------------+-----------+-----------------+\n|predictedLabel|    species|         features|\n+--------------+-----------+-----------------+\n|   Iris Setosa|Iris Setosa|[4.3,3.0,0.1,1.1]|\n|   Iris Setosa|Iris Setosa|[4.4,2.9,0.2,1.4]|\n|   Iris Setosa|Iris Setosa|[4.4,3.0,0.2,1.3]|\n|   Iris Setosa|Iris Setosa|[4.4,3.2,0.2,1.3]|\n|   Iris Setosa|Iris Setosa|[4.8,3.0,0.1,1.4]|\n+--------------+-----------+-----------------+\nonly showing top 5 rows\n\nTest Error = 0.0454545\nRandomForestClassificationModel (uid=rfc_31633e481789) with 10 trees\n"}]},"apps":[],"jobName":"paragraph_1538503279734_1894698945","id":"20180928-225126_1760819723","dateCreated":"2018-10-02T18:01:19+0000","dateStarted":"2018-10-02T19:00:40+0000","dateFinished":"2018-10-02T19:00:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1088"},{"text":"%pyspark\n","dateUpdated":"2018-10-02T18:01:19+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1538503279740_1890851456","id":"20180928-225145_2039373155","dateCreated":"2018-10-02T18:01:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1089"}],"name":"TrainPython","id":"2DUBE52A8","angularObjects":{"2DU271S2M:shared_process":[],"2DT7QKZ5U:shared_process":[],"2DU58SXMJ:shared_process":[],"2DRY1PBFX:shared_process":[],"2DRECSPVX:shared_process":[],"2DRE4FJQC:shared_process":[],"2DU4BHYNW:shared_process":[],"2DS8DY9ZK:shared_process":[],"2DREZJUM6:shared_process":[],"2DTTF4DMX:shared_process":[],"2DU4A2EHT:shared_process":[],"2DSW9ZAU2:shared_process":[],"2DR8B3WB4:shared_process":[],"2DUKMFE6M:shared_process":[],"2DRRQ18HA:shared_process":[],"2DRDKYCUF:shared_process":[],"2DUBSVM1F:shared_process":[],"2DTKG1Q7B:shared_process":[],"2DSGP3JXS:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}